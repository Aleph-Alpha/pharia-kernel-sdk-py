name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lints:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: chartboost/ruff-action@v1

  services:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
    env:
      ARTIFACTORY_URL: https://alephalpha.jfrog.io
      ARTIFACTORY_REPOSITORY: alephalpha.jfrog.io/pharia-kernel-images
    steps:
      - name: Get Identity Token From GitHub
        run: |
          ID_TOKEN=$(curl -sLS -H "User-Agent: actions/oidc-client" -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=$ARTIFACTORY_URL" | jq .value | tr -d '"')
          if [[ -z "$ID_TOKEN" ]]; then exit 1; fi
          echo "ID_TOKEN=$ID_TOKEN" >> $GITHUB_ENV
      - name: Get JFrog Access Token with GitHub Identity Token
        run: |
          JFROG_ACCESS_TOKEN=$(curl \
            -X POST \
            -H "Content-type: application/json" \
            $ARTIFACTORY_URL/access/api/v1/oidc/token \
            -d \
            "{\"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \"subject_token_type\":\"urn:ietf:params:oauth:token-type:id_token\", \"subject_token\": \"$ID_TOKEN\", \"provider_name\": \"github\"}" \
          | jq .access_token -r)
          if [[ -z "$JFROG_ACCESS_TOKEN" ]]; then exit 1; fi
          echo "::add-mask::$JFROG_ACCESS_TOKEN"
          echo "JFROG_ACCESS_TOKEN=$JFROG_ACCESS_TOKEN" >> $GITHUB_ENV
      - name: Get Subject from JFrog Access Token
        run: |
          JFROG_ACCESS_TOKEN_SUBJECT=$(echo $JFROG_ACCESS_TOKEN | awk -F '.' '{print $2 "===="}' | fold -w 4 | sed '$ d' | tr -d '\n' | base64 -d | jq '.sub' -r)
          if [[ -z "$JFROG_ACCESS_TOKEN_SUBJECT" ]]; then exit 1; fi
          echo "JFROG_ACCESS_TOKEN_SUBJECT=$JFROG_ACCESS_TOKEN_SUBJECT" >> $GITHUB_ENV
      - name: Log in to JFrog
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.ARTIFACTORY_REPOSITORY }}
          username: ${{ env.JFROG_ACCESS_TOKEN_SUBJECT }}
          password: ${{ env.JFROG_ACCESS_TOKEN }}
      - name: Pull Pharia Kernel from JFrog
        run: |
          podman pull $ARTIFACTORY_REPOSITORY/pharia-kernel:latest
          podman tag $ARTIFACTORY_REPOSITORY/pharia-kernel:latest pharia-kernel
      - name: Log in to ghcr.io
        uses: redhat-actions/podman-login@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push to ghcr.io
        run: |
          podman push pharia-kernel ghcr.io/aleph-alpha/pharia-kernel-sdk-py/pharia-kernel:latest

  tests:
    runs-on: ubuntu-latest
    needs: services
    services:
      pharia-kernel:
        image: ghcr.io/aleph-alpha/pharia-kernel-sdk-py/pharia-kernel:latest
        ports:
          - 8081:8081
        env:
          AA_API_TOKEN: ${{ secrets.AA_API_TOKEN }}
          LOG_LEVEL: pharia_kernel=debug
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true
          virtualenvs-path: .venv
      - id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/*.yml') }}
      - if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --with dev
      - run: |
          source .venv/bin/activate
          pytest
        env:
          PHARIA_KERNEL_ADDRESS: http://127.0.0.1:8081
          AA_API_TOKEN: ${{ secrets.AA_API_TOKEN }}
