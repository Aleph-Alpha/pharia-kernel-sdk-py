name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lints:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: chartboost/ruff-action@v1

  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true
          virtualenvs-path: .venv
      - id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/*.yml') }}
      - if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --with dev
      - run: |
          source .venv/bin/activate
          pytest -m 'not kernel'

  kernel-tests:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      ARTIFACTORY_URL: https://alephalpha.jfrog.io
      ARTIFACTORY_REPOSITORY: alephalpha.jfrog.io/pharia-kernel-images
      PHARIA_KERNEL_ADDRESS: http://127.0.0.1:8081
      AA_API_TOKEN: ${{ secrets.AA_API_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true
          virtualenvs-path: .venv
      - id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/*.yml') }}
      - if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --with dev

      - name: Build skill
        run: |
          source .venv/bin/activate
          pip install componentize-py
          mkdir wasi_deps
          cd wasi_deps
          curl -OL https://github.com/dicej/wasi-wheels/releases/download/latest/pydantic_core-wasi.tar.gz
          tar xf pydantic_core-wasi.tar.gz
          cd ..
          mkdir skills
          componentize-py -w skill componentize examples.haiku -o skills/haiku.wasm -p . -p wasi_deps

      - name: Get Identity Token From GitHub
        run: |
          ID_TOKEN=$(curl -sLS -H "User-Agent: actions/oidc-client" -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=$ARTIFACTORY_URL" | jq .value | tr -d '"')
          if [[ -z "$ID_TOKEN" ]]; then exit 1; fi
          echo "ID_TOKEN=$ID_TOKEN" >> $GITHUB_ENV
      - name: Get JFrog Access Token with GitHub Identity Token
        run: |
          JFROG_ACCESS_TOKEN=$(curl \
            -X POST \
            -H "Content-type: application/json" \
            $ARTIFACTORY_URL/access/api/v1/oidc/token \
            -d \
            "{\"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \"subject_token_type\":\"urn:ietf:params:oauth:token-type:id_token\", \"subject_token\": \"$ID_TOKEN\", \"provider_name\": \"github\"}" \
          | jq .access_token -r)
          if [[ -z "$JFROG_ACCESS_TOKEN" ]]; then exit 1; fi
          echo "::add-mask::$JFROG_ACCESS_TOKEN"
          echo "JFROG_ACCESS_TOKEN=$JFROG_ACCESS_TOKEN" >> $GITHUB_ENV
      - name: Get Subject from JFrog Access Token
        run: |
          JFROG_ACCESS_TOKEN_SUBJECT=$(echo $JFROG_ACCESS_TOKEN | awk -F '.' '{print $2 "===="}' | fold -w 4 | sed '$ d' | tr -d '\n' | base64 -d | jq '.sub' -r)
          if [[ -z "$JFROG_ACCESS_TOKEN_SUBJECT" ]]; then exit 1; fi
          echo "JFROG_ACCESS_TOKEN_SUBJECT=$JFROG_ACCESS_TOKEN_SUBJECT" >> $GITHUB_ENV
      - name: Log in to JFrog
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.ARTIFACTORY_REPOSITORY }}
          username: ${{ env.JFROG_ACCESS_TOKEN_SUBJECT }}
          password: ${{ env.JFROG_ACCESS_TOKEN }}
      - name: Pull Pharia Kernel from JFrog
        run: |
          podman pull $ARTIFACTORY_REPOSITORY/pharia-kernel:latest
          podman tag $ARTIFACTORY_REPOSITORY/pharia-kernel:latest pharia-kernel

      - name: Start Pharia Kernel
        run: |
          (podman run \
            -v ./skills:/app/skills \
            -e AA_API_TOKEN=$AA_API_TOKEN \
            -e NAMESPACE_UPDATE_INTERVAL=1s \
            -e LOG_LEVEL="pharia_kernel=debug" \
            -p 8081:8081\
            pharia-kernel | cat) &

      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest -m 'kernel'

      - name: Check skill execution
        run: |
          RESPONSE_CODE=$(curl -w '%{http_code}' -s -o /dev/null \
                          127.0.0.1:8081/execute_skill \
                          -H "Authorization: Bearer $AA_API_TOKEN" \
                          -H 'Content-Type: application/json' \
                          -d '{ "skill" : "dev/haiku", "input" : { "topic" : "Homer" } }')

          if [ "$RESPONSE_CODE" = "200" ]; then
              exit 0
          else
              echo "unexpected response code: RESPONSE_CODE='$RESPONSE_CODE'"
              exit 1
          fi
