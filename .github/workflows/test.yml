name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write

env:
  ARTIFACTORY_URL: "https://alephalpha.jfrog.io"
  JFROG_ACCESS_TOKEN_SUBJECT: ${{ secrets.JFROG_ACCESS_TOKEN_SUBJECT }}
  JFROG_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@22695119d769bdb6f7032ad67b9bca0ef8c4a174
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"
      - name: Install dependencies
        run: uv sync --dev
      - name: Lint
        run: uv run ruff check .
      - name: Format
        run: uv run ruff format --diff .
      - name: Check types
        run: uv run mypy --install-types --non-interactive .
      - name: Pyright
        # for catching method override errors with different parameter names
        # reportIncompatibleMethodOverride, not covered by mypy
        run: uv run pyright

  unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@22695119d769bdb6f7032ad67b9bca0ef8c4a174
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"
      - name: Install dependencies
        run: uv sync --dev
      - name: Test
        run: uv run pytest -m 'not kernel'

  kernel-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      ARTIFACTORY_URL: https://alephalpha.jfrog.io
      PHARIA_AI_TOKEN: ${{ secrets.PHARIA_AI_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@22695119d769bdb6f7032ad67b9bca0ef8c4a174
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"
      - name: Install dependencies
        run: uv sync --dev
      - name: Set env variable to publish skill
        shell: bash
        run: echo "JFROG_TOKEN=$JFROG_ACCESS_TOKEN" >> $GITHUB_ENV
      - name: Run Pharia Kernel
        run: sh -x -e ./scripts/run_kernel.sh $JFROG_ACCESS_TOKEN_SUBJECT $JFROG_ACCESS_TOKEN
      - name: Run kernel tests
        run: uv run pytest -m 'kernel'
        env:
          PHARIA_KERNEL_ADDRESS: http://127.0.0.1:8081
          PHARIA_STUDIO_ADDRESS: https://pharia-studio-api.product.pharia.com
      - name: Run example tests
        run: uv run pytest examples
        env:
          PHARIA_KERNEL_ADDRESS: http://127.0.0.1:8081
          PHARIA_STUDIO_ADDRESS: https://pharia-studio-api.product.pharia.com

  integration-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    permissions:
      contents: read
      id-token: write
    env:
      ARTIFACTORY_URL: https://alephalpha.jfrog.io
      PHARIA_AI_TOKEN: ${{ secrets.PHARIA_AI_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@22695119d769bdb6f7032ad67b9bca0ef8c4a174
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"
      - name: Install dependencies
        run: uv sync --dev
      - name: Set env variable to publish skill
        shell: bash
        run: echo "JFROG_TOKEN=$JFROG_ACCESS_TOKEN" >> $GITHUB_ENV
      - name: Test skill building
        run: |
          uv run pharia-skill build tests.skills.haiku --no-interactive
          uv run pharia-skill build tests.skills.search --no-interactive
          uv run pharia-skill build tests.skills.language --no-interactive
          uv run pharia-skill build tests.skills.failing --no-interactive
      - name: Test skill publishing
        run: uv run pharia-skill publish haiku
        env:
          SKILL_REGISTRY_USER: ${{ env.JFROG_ACCESS_TOKEN_SUBJECT }}
          SKILL_REGISTRY_TOKEN: ${{ env.JFROG_ACCESS_TOKEN }}
          SKILL_REGISTRY: alephalpha.jfrog.io
          SKILL_REPOSITORY: pharia-kernel-images/ci
      - name: Test skill execution on ubuntu only
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sh -x -e ./scripts/run_kernel.sh $JFROG_ACCESS_TOKEN_SUBJECT $JFROG_ACCESS_TOKEN
          uv run sh -x -e ./scripts/run_skill.sh haiku $PHARIA_AI_TOKEN
          uv run sh -x -e ./scripts/run_skill.sh search $PHARIA_AI_TOKEN
          uv run sh -x -e ./scripts/run_skill.sh language $PHARIA_AI_TOKEN
          uv run sh -x -e ./scripts/run_failing_skill.sh $PHARIA_AI_TOKEN
      - name: Test skill metadata on ubuntu only
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          uv run sh -x -e ./scripts/metadata_skill.sh haiku $PHARIA_AI_TOKEN
